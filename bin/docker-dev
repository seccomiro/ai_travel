#!/usr/bin/env bash

# Helper script for Docker development environment

set -e

# Set custom project name to avoid ai_travel naming
export COMPOSE_PROJECT_NAME=tripyo

case "$1" in
  "setup")
    echo "üöÄ Setting up Docker development environment..."

    # Stop any running local PostgreSQL to avoid port conflicts
    echo "üìä Checking for local PostgreSQL conflicts..."
    if lsof -i :5432 >/dev/null 2>&1; then
      echo "‚ö†Ô∏è  Port 5432 is in use. You may need to stop local PostgreSQL:"
      echo "   brew services stop postgresql"
      echo "   or adjust the port in docker-compose.yml"
    fi

    # Build and start containers
    docker compose build
    docker compose up -d postgres postgres_test redis

    # Wait for PostgreSQL to be ready
    echo "‚è≥ Waiting for PostgreSQL to be ready..."
    sleep 10

    # Setup database
    docker compose run --rm web bin/rails db:create db:migrate
    docker compose run --rm -e RAILS_ENV=test web bin/rails db:create db:migrate

    echo "‚úÖ Docker development environment is ready!"
    echo "   Run: bin/docker-dev start"
    ;;

  "start")
    echo "üöÄ Starting Docker development environment..."
    docker compose up
    ;;

  "stop")
    echo "üõë Stopping Docker development environment..."
    docker compose down
    ;;

  "restart")
    echo "üîÑ Restarting Docker development environment..."
    docker compose down
    docker compose up
    ;;

  "reset")
    echo "üóëÔ∏è  Resetting Docker development environment..."
    docker compose down -v
    docker compose build --no-cache
    $0 setup
    ;;

  "logs")
    docker compose logs -f "${2:-web}"
    ;;

  "shell")
    echo "üêö Opening shell in Docker container..."
    docker compose run --rm web bash
    ;;

  "rails")
    shift
    echo "üöÇ Running Rails command: $*"
    docker compose run --rm web bin/rails "$@"
    ;;

  "bundle")
    shift
    echo "üì¶ Running Bundle command: $*"
    docker compose run --rm -u root web bundle "$@"
    ;;

  "test")
    shift
    echo "üß™ Running tests in Docker..."
    # Ensure test database is ready
    docker compose run --rm -e RAILS_ENV=test web bin/rails db:migrate 2>/dev/null || true
    # Run tests in a temporary container
    docker compose run --rm -e RAILS_ENV=test web bundle exec rspec "$@"
    ;;

  "local")
    echo "üè† Switching back to local development..."
    docker compose down
    echo "‚úÖ Docker stopped. You can now use: bin/dev"
    ;;

  *)
    echo "üê≥ Tripyo Docker Development Helper"
    echo ""
    echo "Usage: bin/docker-dev <command>"
    echo ""
    echo "Commands:"
    echo "  setup    - Initial setup of Docker environment"
    echo "  start    - Start all services (web, postgres, redis, sidekiq)"
    echo "  stop     - Stop all services"
    echo "  restart  - Restart all services"
    echo "  reset    - Reset environment (removes volumes and rebuilds)"
    echo "  logs     - Show logs (optionally specify service: logs web)"
    echo "  shell    - Open bash shell in web container (no services needed)"
    echo "  rails    - Run rails commands (e.g., rails console) (no services needed)"
    echo "  bundle   - Run bundle commands (e.g., bundle install) (no services needed)"
    echo "  test     - Run test suite (optionally specify file: test spec/models/) (no services needed)"
    echo "  local    - Stop Docker and switch back to local development"
    echo ""
    echo "Examples:"
    echo "  bin/docker-dev setup     # First time setup"
    echo "  bin/docker-dev start     # Start development"
    echo "  bin/docker-dev rails c   # Rails console (no services needed)"
    echo "  bin/docker-dev test      # Run tests (no services needed)"
    echo "  bin/docker-dev bundle install  # Install gems (no services needed)"
    echo "  bin/docker-dev local     # Back to local dev"
    ;;
esac
